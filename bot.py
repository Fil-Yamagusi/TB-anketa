#!/usr/bin/env python3.7
# -*- coding: utf-8 -*-
"""
    2023-12-18
    –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —Å —à—É—Ç–æ—á–Ω–æ–π –∞–Ω–∫–µ—Ç–æ–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
    Fil FC Math test
    fil_fc_math_test_bot
    6935069653:AAG9ml7xd6ldG9TMyu2wc8lVoCgosJz3nRo
    https://t.me/fil_fc_math_test_bot
"""

from lists import *

import time
import random

from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, Message

random.seed(time.time())

TOKEN = "6935069653:AAG9ml7xd6ldG9TMyu2wc8lVoCgosJz3nRo"
bot = TeleBot(TOKEN)

# –ú–µ–Ω—é —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
markup = ReplyKeyboardMarkup(
    row_width=2)
NEW_TEST_COMMAND = "new_test"
NEW_TEST_MENU = "‚ô®Ô∏è –ù–æ–≤—ã–π —Ç–µ—Å—Ç"
RESUME_COMMAND = "resume"
RESUME_MENU = "‚ô®Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
markup.add(
    * [NEW_TEST_MENU, RESUME_MENU])

# –ú–µ–Ω—é —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 0 –¥–æ 9)
markupNumbers = ReplyKeyboardMarkup(
    row_width=10)
digits = {
    1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£",
    6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 0: "0Ô∏è‚É£",
}
markupNumbers.add(* digits.values())

# –ú–µ–Ω—é —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∏ —á—É–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
markupStat = ReplyKeyboardMarkup(
    row_width=2)
MY_STAT_COMMAND = "my_stat"
MY_STAT_MENU = "„ÄΩÔ∏è –ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
BEST_COMMAND = "best"
BEST_MENU = "üèÜ –ß–µ–º–ø–∏–æ–Ω—ã"
markupStat.add(* [MY_STAT_MENU, BEST_MENU])


Settings = {
    "this_hour": -1,
    "record_table": []
}


def generate_record_table() -> None:
    if Settings["this_hour"] != int(time.strftime("%H")):
        Settings["this_hour"] = int(time.strftime("%H"))
        Settings["record_table"] = []
        for i in range(1, 6):
            Settings["record_table"].append(
                f"<b>{i}</b>. Telegram user "
                f"#{random.randint(2124501689-1000000,
                                   2124501689+1000000)}: "
                f" <b>{100 - i * 6 - random.randint(-3, 3)}</b>%"
            )


Users = {}
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ. –° —Ñ–æ—Ä–º–æ–π "–≤–æ–ø—Ä–æ—Å–æ–≤"
Q_MAX = 10
ANSWER_NOTE = "<i>–µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–π, –¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ –º–æ–¥—É–ª—é 10</i>"
math_person = ["–ö–æ–ª–º–∞–Ω–æ–≤—Å–∫–æ–º—É", "–ö–∞—Ä–ª—É –ì–∞—É—Å—Å—É", "–õ–µ–æ–Ω–∞—Ä–¥—É –≠–π–ª–µ—Ä—É", "–ï–≤–∫–ª–∏–¥—É",
               "–ü–∏—Ñ–∞–≥–æ—Ä—É", "–ê—Ä—Ö–∏–º–µ–¥—É", "–ú–µ–Ω–µ–ª–∞—é", "–§–∞–ª–µ—Å—É", "–ü—Ç–æ–ª–µ–º–µ—é",
               "–§–∏–±–æ–Ω–∞—á—á–∏", "–í–µ–π–µ—Ä—à—Ç—Ä–∞—Å—Å—É",]


# –ó–¥–æ—Ä–æ–≤–∞–µ–º—Å—è, –≥–æ–≤–æ—Ä–∏–º –∫—Ä–∞—Ç–∫–æ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞
@bot.message_handler(
    func=lambda message:
    any(word in message.text.lower()
        for word in ['—Å—Ç–∞—Ä—Ç', 'start', 'cnfhn', '—ã–µ—Ñ–∫–µ',
                     '–ø–æ–º–æ—â', 'help', 'gjvjo', '—Ä—É–¥–∑', ]),
    content_types=["text"])
@bot.message_handler(
    commands=["start", "help"])
def handle_start(message: Message):
    """ –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ """
    generate_record_table()
    ave = math_person[random.randint(0, len(math_person) - 1)]
    bot.send_message(
        message.chat.id,
        f"–°–ª–∞–≤–∞ {ave}, –∫ –Ω–∞–º –ø—Ä–∏—à—ë–ª {message.chat.first_name}!\n\n"
        f"–ú–∏—Ä –ø–æ–ª–æ–Ω —Å–ª—É—Ö–æ–≤, —á—Ç–æ —Ç—ã –≤–µ–ª–∏–∫–∏–π –º–∞—Ç–µ–º–∞—Ç–∏–∫.\n"
        f"–®—Ç–æ—à, —ç—Ç–æ –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.\n"
        f"<b>–í—Å–µ–≥–æ {Q_MAX + 1} –≤–æ–ø—Ä–æ—Å–æ–≤!</b>\n\n"
        f"–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç /new_test\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–∂–µ –Ω–∞—á–∞—Ç—ã–π /resume\n"
        f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É /my_stat\n"
        f"–¢–∞–±–ª–∏—Ü–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤ /best\n\n"
        f"–í—Å–ø–æ–º–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help",
        parse_mode="HTML",
        reply_markup=markup
    )


# –ù–æ–≤—ã–π —Ç–µ—Å—Ç
@bot.message_handler(
    func=lambda message: message.text in [NEW_TEST_MENU, RESUME_MENU],
    content_types=["text"])
@bot.message_handler(
    commands=[NEW_TEST_COMMAND, RESUME_COMMAND])
def handle_new_test(message: Message):
    """ –ù–æ–≤—ã–π —Ç–µ—Å—Ç, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ """
    # print(message)
    user_id = message.from_user.id

    if user_id not in Users.keys():
        q_id = get_new_question_id(but_id=-1)
        Users[user_id] = {
            "attempts": 1,  # –∫–∞–∫–∞—è –ø–æ —Å—á—ë—Ç—É –ø–æ–ø—ã—Ç–∫–∞
            "time_first": time.strftime("%Y-%m-%d %H:%M:%S"),
            "time_last": time.strftime("%Y-%m-%d %H:%M:%S"),
            "q_num_now": 1,  # —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —Å—á—ë—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "q_id_now": q_id,  # —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å, id –≤ –±–∞–∑–µ –≤–æ–ø—Ä–æ—Å–æ–≤
            "q_correct": 0,  # –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            "test_started": True,  # —Ç–µ—Å—Ç –Ω–∞—á–∞—Ç
            "test_finished": False,  # —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω –¥–æ –∫–æ–Ω—Ü–∞?
        }
        bot.send_message(
            message.chat.id,
            "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!"
            )
    else:
        Users[user_id]['test_finished'] = False
        q_id = Users[user_id]['q_id_now']
        bot.send_message(
            message.chat.id,
            f"–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {Users[user_id]['time_last']}\n"
            f"–Ω–∞ –≤–æ–ø—Ä–æ—Å–µ ‚Ññ{Users[user_id]['q_num_now']}.\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
        )

    bot.send_message(
        message.chat.id,
        f"<b>–í–æ–ø—Ä–æ—Å ‚Ññ{Users[user_id]['q_num_now']} "
        f"–∏–∑ {Q_MAX + 1}</b>\n\n"
        f"{questions[q_id]}\n\n"
        f"{ANSWER_NOTE}",
        parse_mode="HTML",
        reply_markup=markupNumbers)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@bot.message_handler(
    content_types=["text"],
    func=lambda message: message.text in digits.values()
)
def handle_answer(message: Message):
    """ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? """
    user_id = message.from_user.id
    # –µ—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª
    if user_id not in Users.keys():
        bot.reply_to(
            message,
            f"–ù–µ –ø–æ–Ω–∏–º–∞—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–ø–µ—á–∞—Ç–∫–∞? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help",
            parse_mode="HTML",
            reply_markup=markup)
    elif Users[user_id]["test_started"] and not Users[user_id]["test_finished"]:
        answer = [k for k, v in digits.items() if v == message.text][0]
        bot.reply_to(
            message,
            f"<b>–í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ{Users[user_id]['q_num_now']}</b>: "
            f"{answer}\n\n"
            f"üò≤ {bad_comment[random.randint(0, len(bad_comment) - 1)]}",
            parse_mode="HTML")

        Users[user_id]["time_last"] = time.strftime("%Y-%m-%d %H:%M:%S")
        Users[user_id]['q_num_now'] += 1
        if Users[user_id]['q_num_now'] > Q_MAX:
            Users[user_id]["test_finished"] = True
            Users[user_id]['q_num_now'] = 1
            Users[user_id]['attempts'] += 1

            bot.send_message(
                message.chat.id,
                f"–í —Ç–µ—Å—Ç–µ {Q_MAX + 1} –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–µ–≤–∏–¥–µ–Ω... "
                f"–ù–µ –±—É–¥—É –≤–∞—Å –±–æ–ª—å—à–µ –º—É—á–∏—Ç—å.\n\n"
                f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç /my_stat\n"
                f"–∏ —Ç–∞–±–ª–∏—Ü—É —á–µ–º–ø–∏–æ–Ω–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Å–∞ /best",
                parse_mode="HTML",
                reply_markup=markupStat)
        else:
            q_id = get_new_question_id(but_id=-1)
            Users[user_id]['q_id_now'] = q_id
            bot.send_message(
                message.chat.id,
                f"<b>–í–æ–ø—Ä–æ—Å ‚Ññ{Users[user_id]['q_num_now']} "
                f"–∏–∑ {Q_MAX + 1}</b>\n\n"
                f"{questions[q_id]}\n\n"
                f"{ANSWER_NOTE}",
                parse_mode="HTML",
                reply_markup=markupNumbers)


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã —á–µ–º–ø–∏–æ–Ω–æ–≤
@bot.message_handler(
    func=lambda message: message.text in [MY_STAT_MENU, BEST_MENU],
    content_types=["text"])
@bot.message_handler(
    commands=[MY_STAT_COMMAND, BEST_COMMAND])
def handle_my_stat(message: Message):
    """ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ç–∞–±–ª–∏—Ü—É """
    generate_record_table()
    user_id = message.from_user.id
    if user_id in Users.keys():
        if Users[user_id]["test_finished"]:
            bot.send_message(
                message.chat.id,
                f"–ú–æ–π –¥—Ä—É–≥ <b>{message.chat.first_name}</b>!\n\n"
                f"–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ<b>{Users[user_id]['attempts'] - 1}</b>\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫ —Å–µ–±–µ: <b>0</b> –∏–∑ <b>{Q_MAX}</b>\n"
                f"–î–∏–∞–≥–Ω–æ–∑: <b>–≤—ã - –≥—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π!</b>"
                f"üòÇ ü§£ üòÜ\n\n",
                parse_mode="HTML")
        else:
            bot.send_message(
                message.chat.id,
                f"–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç! /resume\n\n",
                parse_mode="HTML")
    else:
        bot.send_message(
            message.chat.id,
            f"–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ —Ç–µ—Å—Ç! /new_test\n\n",
            parse_mode="HTML")
    bot.send_message(
        message.chat.id,
        f"<b>TOP-5 —Ä–µ–∫–æ—Ä–¥–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Å–∞:</b>\n\n"
        f"{"\n".join(Settings['record_table'])}",
        parse_mode="HTML",
        reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤—ã—è—Å–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(content_types=["text"])
def handle_error(message: Message):
    """ –§—É–Ω–∫—Ü–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    bot.reply_to(
        message,
        f"–ù–µ –ø–æ–Ω–∏–º–∞—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–ø–µ—á–∞—Ç–∫–∞? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help",
        parse_mode="HTML",
        reply_markup=markup)


print(time.strftime("%H:%M:%S"))
print(TOKEN)
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as ex:
        print(ex)
        time.sleep(10)
